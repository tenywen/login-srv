// Code generated by protoc-gen-go.
// source: geoip.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type GeoIP struct {
}

func (m *GeoIP) Reset()         { *m = GeoIP{} }
func (m *GeoIP) String() string { return proto1.CompactTextString(m) }
func (*GeoIP) ProtoMessage()    {}

// The request message containing ip address
type GeoIP_IP struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GeoIP_IP) Reset()         { *m = GeoIP_IP{} }
func (m *GeoIP_IP) String() string { return proto1.CompactTextString(m) }
func (*GeoIP_IP) ProtoMessage()    {}

type GeoIP_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GeoIP_Name) Reset()         { *m = GeoIP_Name{} }
func (m *GeoIP_Name) String() string { return proto1.CompactTextString(m) }
func (*GeoIP_Name) ProtoMessage()    {}

func init() {
}

// Client API for GeoIPService service

type GeoIPServiceClient interface {
	QueryCountry(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
	QuerySubdivision(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
	QueryCity(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
}

type geoIPServiceClient struct {
	cc *grpc.ClientConn
}

func NewGeoIPServiceClient(cc *grpc.ClientConn) GeoIPServiceClient {
	return &geoIPServiceClient{cc}
}

func (c *geoIPServiceClient) QueryCountry(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QueryCountry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoIPServiceClient) QuerySubdivision(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QuerySubdivision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoIPServiceClient) QueryCity(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QueryCity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeoIPService service

type GeoIPServiceServer interface {
	QueryCountry(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
	QuerySubdivision(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
	QueryCity(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
}

func RegisterGeoIPServiceServer(s *grpc.Server, srv GeoIPServiceServer) {
	s.RegisterService(&_GeoIPService_serviceDesc, srv)
}

func _GeoIPService_QueryCountry_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeoIPServiceServer).QueryCountry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GeoIPService_QuerySubdivision_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeoIPServiceServer).QuerySubdivision(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GeoIPService_QueryCity_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeoIPServiceServer).QueryCity(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GeoIPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GeoIPService",
	HandlerType: (*GeoIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCountry",
			Handler:    _GeoIPService_QueryCountry_Handler,
		},
		{
			MethodName: "QuerySubdivision",
			Handler:    _GeoIPService_QuerySubdivision_Handler,
		},
		{
			MethodName: "QueryCity",
			Handler:    _GeoIPService_QueryCity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
