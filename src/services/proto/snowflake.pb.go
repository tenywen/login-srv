// Code generated by protoc-gen-go.
// source: snowflake.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	snowflake.proto

It has these top-level messages:
	Snowflake
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Snowflake struct {
}

func (m *Snowflake) Reset()         { *m = Snowflake{} }
func (m *Snowflake) String() string { return proto1.CompactTextString(m) }
func (*Snowflake) ProtoMessage()    {}

type Snowflake_Key struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Snowflake_Key) Reset()         { *m = Snowflake_Key{} }
func (m *Snowflake_Key) String() string { return proto1.CompactTextString(m) }
func (*Snowflake_Key) ProtoMessage()    {}

type Snowflake_Value struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Snowflake_Value) Reset()         { *m = Snowflake_Value{} }
func (m *Snowflake_Value) String() string { return proto1.CompactTextString(m) }
func (*Snowflake_Value) ProtoMessage()    {}

type Snowflake_NullRequest struct {
}

func (m *Snowflake_NullRequest) Reset()         { *m = Snowflake_NullRequest{} }
func (m *Snowflake_NullRequest) String() string { return proto1.CompactTextString(m) }
func (*Snowflake_NullRequest) ProtoMessage()    {}

type Snowflake_UUID struct {
	Uuid uint64 `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *Snowflake_UUID) Reset()         { *m = Snowflake_UUID{} }
func (m *Snowflake_UUID) String() string { return proto1.CompactTextString(m) }
func (*Snowflake_UUID) ProtoMessage()    {}

func init() {
}

// Client API for SnowflakeService service

type SnowflakeServiceClient interface {
	Next(ctx context.Context, in *Snowflake_Key, opts ...grpc.CallOption) (*Snowflake_Value, error)
	GetUUID(ctx context.Context, in *Snowflake_NullRequest, opts ...grpc.CallOption) (*Snowflake_UUID, error)
}

type snowflakeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeServiceClient(cc *grpc.ClientConn) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) Next(ctx context.Context, in *Snowflake_Key, opts ...grpc.CallOption) (*Snowflake_Value, error) {
	out := new(Snowflake_Value)
	err := grpc.Invoke(ctx, "/proto.SnowflakeService/Next", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeServiceClient) GetUUID(ctx context.Context, in *Snowflake_NullRequest, opts ...grpc.CallOption) (*Snowflake_UUID, error) {
	out := new(Snowflake_UUID)
	err := grpc.Invoke(ctx, "/proto.SnowflakeService/GetUUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnowflakeService service

type SnowflakeServiceServer interface {
	Next(context.Context, *Snowflake_Key) (*Snowflake_Value, error)
	GetUUID(context.Context, *Snowflake_NullRequest) (*Snowflake_UUID, error)
}

func RegisterSnowflakeServiceServer(s *grpc.Server, srv SnowflakeServiceServer) {
	s.RegisterService(&_SnowflakeService_serviceDesc, srv)
}

func _SnowflakeService_Next_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Snowflake_Key)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SnowflakeServiceServer).Next(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SnowflakeService_GetUUID_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Snowflake_NullRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SnowflakeServiceServer).GetUUID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SnowflakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _SnowflakeService_Next_Handler,
		},
		{
			MethodName: "GetUUID",
			Handler:    _SnowflakeService_GetUUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
