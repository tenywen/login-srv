// Code generated by protoc-gen-go.
// source: wordfilter.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type WordFilter struct {
}

func (m *WordFilter) Reset()         { *m = WordFilter{} }
func (m *WordFilter) String() string { return proto1.CompactTextString(m) }
func (*WordFilter) ProtoMessage()    {}

type WordFilter_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *WordFilter_Text) Reset()         { *m = WordFilter_Text{} }
func (m *WordFilter_Text) String() string { return proto1.CompactTextString(m) }
func (*WordFilter_Text) ProtoMessage()    {}

func init() {
}

// Client API for WordFilterService service

type WordFilterServiceClient interface {
	Filter(ctx context.Context, in *WordFilter_Text, opts ...grpc.CallOption) (*WordFilter_Text, error)
}

type wordFilterServiceClient struct {
	cc *grpc.ClientConn
}

func NewWordFilterServiceClient(cc *grpc.ClientConn) WordFilterServiceClient {
	return &wordFilterServiceClient{cc}
}

func (c *wordFilterServiceClient) Filter(ctx context.Context, in *WordFilter_Text, opts ...grpc.CallOption) (*WordFilter_Text, error) {
	out := new(WordFilter_Text)
	err := grpc.Invoke(ctx, "/proto.WordFilterService/Filter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordFilterService service

type WordFilterServiceServer interface {
	Filter(context.Context, *WordFilter_Text) (*WordFilter_Text, error)
}

func RegisterWordFilterServiceServer(s *grpc.Server, srv WordFilterServiceServer) {
	s.RegisterService(&_WordFilterService_serviceDesc, srv)
}

func _WordFilterService_Filter_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(WordFilter_Text)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(WordFilterServiceServer).Filter(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _WordFilterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WordFilterService",
	HandlerType: (*WordFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _WordFilterService_Filter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
