// Code generated by protoc-gen-go.
// source: login.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	login.proto

It has these top-level messages:
	User
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type User struct {
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()    {}

type User_LoginInfo struct {
	Uuid      string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	LoginType int32  `protobuf:"varint,2,opt,name=login_type" json:"login_type,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Passwd    string `protobuf:"bytes,4,opt,name=passwd" json:"passwd,omitempty"`
	Host      string `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
}

func (m *User_LoginInfo) Reset()         { *m = User_LoginInfo{} }
func (m *User_LoginInfo) String() string { return proto1.CompactTextString(m) }
func (*User_LoginInfo) ProtoMessage()    {}

type User_LoginResp struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *User_LoginResp) Reset()         { *m = User_LoginResp{} }
func (m *User_LoginResp) String() string { return proto1.CompactTextString(m) }
func (*User_LoginResp) ProtoMessage()    {}

type User_NullResult struct {
}

func (m *User_NullResult) Reset()         { *m = User_NullResult{} }
func (m *User_NullResult) String() string { return proto1.CompactTextString(m) }
func (*User_NullResult) ProtoMessage()    {}

func init() {
}

// Client API for LoginService service

type LoginServiceClient interface {
	Login(ctx context.Context, in *User_LoginInfo, opts ...grpc.CallOption) (*User_LoginResp, error)
}

type loginServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoginServiceClient(cc *grpc.ClientConn) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) Login(ctx context.Context, in *User_LoginInfo, opts ...grpc.CallOption) (*User_LoginResp, error) {
	out := new(User_LoginResp)
	err := grpc.Invoke(ctx, "/proto.LoginService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginService service

type LoginServiceServer interface {
	Login(context.Context, *User_LoginInfo) (*User_LoginResp, error)
}

func RegisterLoginServiceServer(s *grpc.Server, srv LoginServiceServer) {
	s.RegisterService(&_LoginService_serviceDesc, srv)
}

func _LoginService_Login_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(User_LoginInfo)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(LoginServiceServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _LoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LoginService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
